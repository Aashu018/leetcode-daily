/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode mid = middleNode(head);
        ListNode headsec = reverseList(mid);
        ListNode rereverse = headsec;

        while(head != null && headsec != null){
            if(head.val != headsec.val){
                break;
            }
            head = head.next;
            headsec = headsec.next;
        }

        reverseList(rereverse);
        if(head == null || headsec == null){
            return true;
        }
        return false;
    }
     public ListNode reverseList(ListNode head) {
        if(head == null){
            return head;
        }
       ListNode prev = null;
       ListNode pre = head;
       ListNode fut = pre.next;
       
       while(pre != null){
           pre.next = prev;
           prev = pre;
           pre = fut;
           if(fut != null){
               fut = fut.next;
           }
       }
       return prev;
    }
       public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast!= null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
        
    }
}
